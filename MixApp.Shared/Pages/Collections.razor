@page "/Collections"
@inherits MixApp.Shared.Pages.CollectionsBase
@using System.Text.Json;

<div class="page">
    @if(SelectedCollection == null)
    {
        <div class="group">
             @if (Collections.Count == 0)
            {
                for (int index = 0; index < 4; index++)
                {
                    <SkeletonCollection />
                }
            }
            else
            {
                @foreach(var collection in Collections)
                {
                    <FluentCard class="collection">
                        <div class="content">
                            <div class="left">
                                <h2>@collection.Name</h2>
                                <p class="intro">@collection.Introduction</p>

                                <FluentButton OnClick=@(_ => SelectedCollection = collection) 
                                    Appearance="Appearance.Outline">
                                    Discover More
                                </FluentButton>
                            </div>

                            <div class="right">
                                @foreach(Software software in JsonSerializer.Deserialize<List<Software>>(collection.Softwares!) ?? [])
                                {
                                    @if(software.Pin ?? false)
                                    {
                                        <img id="@software.PackageIdentifier" class="icon" 
                                            src="@RemoteAssets.GetIcon(software)" 
                                            @onclick=@(_ => GlobalEvent.OpenSoftware(software))
                                            fetchpriority="low" loading="lazy" 
                                            onerror="javascript:this.src='https://www.conchbrain.club/favicon.ico'">

                                        <FluentTooltip Anchor="@software.PackageIdentifier">
                                            @software.PackageName
                                        </FluentTooltip>
                                    }
                                }
                            </div>
                        </div>
                    </FluentCard>
                }
            }
        </div>
    }
    else
    {
        <div class="detail">
            <div class="header">
                <FluentButton Appearance="Appearance.Outline" OnClick="@(_ => SelectedCollection = null)"
                    IconStart="@(new Icons.Regular.Size16.ArrowLeft())">
                    Back
                </FluentButton>

                <FluentBadge Appearance="Appearance.Accent" Height="25px" >
                    <strong>
                        &nbsp;&nbsp; @SelectedCollection?.Name &nbsp;&nbsp;
                    </strong>
                </FluentBadge>
            </div>

            <div class="content">
                @foreach(var software in JsonSerializer.Deserialize<List<Software>>(SelectedCollection?.Softwares!) ?? [])
                {
                    <SoftwareCard Software="software" />
                }
            </div>
        </div>
    }
</div>

<style>
    .page {
        height: 100%;
        overflow-y: scroll;
        width: 100%;
        padding: 10px 20px;
    }

    .page .group {
        width: 100%;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .page .collection {
        background-attachment: fixed;
        background-size: 130vmax 130vmax, 80vmax 80vmax, 90vmax 90vmax, 110vmax 110vmax, 90vmax 90vmax;
        background-position: -80vmax -80vmax, 60vmax -30vmax, 10vmax 10vmax, -30vmax -10vmax, 50vmax 50vmax;
        background-repeat: no-repeat;
        animation: 10s movement linear infinite;
        height: 220px;
        width: calc(50% - 6px);
        background-image: 
            radial-gradient(closest-side,rgb(43, 66, 163),rgba(235,105,78,0)), 
            radial-gradient(closest-side,rgb(122, 64, 143),rgba(243,11,164,0)),
            radial-gradient(closest-side,rgb(91, 49, 160),rgba(254,234,131,0)),
            radial-gradient(closest-side,rgb(69, 143, 149),rgba(170,142,245,0)),
            radial-gradient(closest-side,rgb(59, 95, 147),rgba(248,192,147,0));
    }

    @@media only screen and (max-width: 1280px) {
        .page .collection {
            width: 100%;
        }
    }

    @@keyframes movement {
        0%, 100% {
            background-size: 130vmax 130vmax, 80vmax 80vmax, 90vmax 90vmax, 110vmax 110vmax, 90vmax 90vmax;
            background-position: -80vmax -80vmax, 60vmax -30vmax, 10vmax 10vmax, -30vmax -10vmax, 50vmax 50vmax;
        }
        25% {
            background-size: 100vmax 100vmax, 90vmax 90vmax, 100vmax 100vmax, 90vmax 90vmax, 60vmax 60vmax;
            background-position: -60vmax -90vmax, 50vmax -40vmax, 0vmax -20vmax, -40vmax -20vmax, 40vmax 60vmax;
        }
        50% {
            background-size: 80vmax 80vmax, 110vmax 110vmax, 80vmax 80vmax, 60vmax 60vmax, 80vmax 80vmax;
            background-position: -50vmax -70vmax, 40vmax -30vmax, 10vmax 0vmax, 20vmax 10vmax, 30vmax 70vmax;
        }
        75% {
            background-size: 90vmax 90vmax, 90vmax 90vmax, 100vmax 100vmax, 90vmax 90vmax, 70vmax 70vmax;
            background-position: -50vmax -40vmax, 50vmax -30vmax, 20vmax 0vmax, -10vmax 10vmax, 40vmax 60vmax;
        }
    }

    .collection .content {
        display: flex;
        justify-content: space-around;
        height: 100%;
    }

    .collection .content > div {
        margin: auto 0;
    }

    .left .intro {
        max-width: 300px;
    }

    .right .icon {
        margin: 5px;
        height: 50px;
        border-radius: 5px;
        transition: all .2s ease-out;
        cursor: pointer;
    }

    .right .icon:hover {
        transform: scale(1.3);
    }

    .detail .header {
        display: flex;
        margin: 0 0 15px 0;
    }

    .header > fluent-badge {
        margin: auto 10px;
    }

    .detail .content {
        display: grid;
        grid-template-columns: repeat(5, minmax(0, 1fr));
        grid-gap: 1em;
    }
    
    @@media only screen and (max-width: 1400px) {
        .detail .content {
            grid-template-columns: repeat(4, minmax(0, 1fr));
        }
    }

    @@media only screen and (max-width: 1200px) {
        .detail .content {
            grid-template-columns: repeat(3, minmax(0, 1fr));
        }
    }

    @@media only screen and (max-width: 950px) {
        .detail .content {
            grid-template-columns: repeat(2, minmax(0, 1fr));
        }
    }

    @@media only screen and (max-width: 700px) {
        .detail .content {
            width: 100%;
            grid-template-columns: repeat(1, minmax(0, 1fr));
        }
    }
</style>